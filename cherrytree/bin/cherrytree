#!/usr/bin/env python
import json
import os
import re
import sys

import click
import delegator
from pyhocon import ConfigFactory
import yaml
from yaspin import yaspin

from cherrytree.branch import CherryTreeBranch

sys.path.insert(0, os.path.abspath(".."))


@click.group()
def cli():
    click.secho("üçíüå≥üçí CherryTree", fg="cyan")


@cli.command()
@click.argument("minor_version")
@click.option(
    "--search-branch", '-s', multiple=True,
    help='Default "master", multiple is allowed as in "-s foo -s bar"')
@click.option(
    "--labels", '-l', multiple=True,
    help='PR labels to include in branch, default is "v{branch}"')
@click.option("--base-ref", '-r')
@click.option(
    '--output-format', '-o', type=click.Choice(['yaml', 'json']), default='json')
def update_recipe(
        minor_version,
        search_branch,
        base_ref,
        labels,
        output_format='json',
):
    """Creates or updates a recipe (release) file"""
    click.secho(f"Crafting recipe for {minor_version}", fg="yellow")
    search_branches = search_branch or ['master']
    rb = CherryTreeBranch(
        minor_version, base_ref, search_branches=search_branches,
        labels=labels,
    )
    data = rb.data()
    if output_format == 'yaml':
        output = yaml.dump(data, default_flow_style=False)
    else:
        output = json.dumps(data, indent=2)
    click.secho(output, fg='blue')


def os_system(cmd, raise_on_error=True) -> str:
    p = delegator.run(cmd)
    if raise_on_error and p.return_code != 0:
        click.secho(p.err, fg='red')
        raise Exception(f"Command failed: {cmd}")
    return p.out


def git_get_current_head() -> str:
    output = os_system("git status | head -1")
    match = re.match("(?:HEAD detached at|On branch) (.*)", output)
    if not match:
        return ""
    return match.group(1)


def update_spinner_txt(spinner, txt):
    spinner.text = txt


def get_remotes_from_current_repo():
    return ["preset-io", "apache"]


@cli.command()
@click.argument("micro_version")
def bake(micro_version, *args):
    """Bakes a release based on a bake file"""
    print(args)
    with yaspin(text="Loading", color="yellow") as spinner:
        conf = ConfigFactory.parse_file("bakefiles/build.conf")

        base_ref = conf.get("base_ref")

        commit_msg = "my msg üçí"

        current_head = git_get_current_head()

        update_spinner_txt(spinner, "Checking out changes")

        update_spinner_txt(spinner, "Fetching all branches...")
        os_system("git fetch --all")

        update_spinner_txt(spinner, "Checking out base branch...")
        os_system(f"git checkout {base_ref}")

        os_system("git branch -D _temp-branch", raise_on_error=False)
        os_system("git checkout -b _temp-branch")

        for cherry in conf.get("cherries"):
            sha = cherry["SHA"]
            pr_number = cherry["pr_number"]
            pr_title = cherry["pr_title"]
            update_spinner_txt(spinner, f"Placing üçí #{pr_number}: {pr_title}")
            try:
                os_system(f"git cherry-pick -x {sha}")
            except Exception:
                os_system("git cherry-pick --abort")
                update_spinner_txt(spinner, f"Exception #{pr_number}: {pr_title}")
                os_system(f"git checkout {current_head}")
                os_system("git branch -D _temp-branch")
                exit(1)

        num_of_cherries = len(conf.get("cherries"))
        os_system(f"git reset --soft HEAD~{num_of_cherries}")
        os_system("git commit -m '{}'".format(conf.get("version")))

        version = conf.get_string("version")
        bumped_version = int(version.split(".")[-1]) + 1

        os.chdir("..")
        current_superset_private_branch = (
            os.popen("git rev-parse --abbrev-ref HEAD").read().split("\n")[0]
        )
        os_system("git add .")
        os_system(f"git commit -m '{commit_msg}'")
        os_system(f"git push origin {current_superset_private_branch}")
        update_spinner_txt(spinner, "Redirecting you to github for PR creation üö¢")
        click.launch(
            f"https://github.com/lyft/superset-private/compare/{current_superset_private_branch}"
        )


if __name__ == "__main__":
    cli()
